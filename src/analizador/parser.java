
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 18 00:14:25 ART 2015
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 18 00:14:25 ART 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\017\007\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\002\000\002\004\005\000" +
    "\002\010\003\000\002\010\004\000\002\005\003\000\002" +
    "\005\005\000\002\016\003\000\002\016\006\000\002\006" +
    "\003\000\002\006\004\000\002\015\007\000\002\015\007" +
    "\000\002\015\010\000\002\015\010\000\002\007\004\000" +
    "\002\007\006\000\002\011\006\000\002\011\005\000\002" +
    "\011\004\000\002\012\003\000\002\012\004\000\002\021" +
    "\006\000\002\021\004\000\002\021\011\000\002\021\007" +
    "\000\002\021\011\000\002\021\005\000\002\021\005\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\003\000\002\021\003\000\002\022\003\000\002\022" +
    "\005\000\002\022\006\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\005\000\002\024\004\000\002" +
    "\024\004\000\002\024\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\003\000\002\030" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\014\005\000" +
    "\002\014\006\000\002\014\005\000\002\013\003\000\002" +
    "\013\005\000\002\020\003\000\002\020\003\000\002\020" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\004\014\006\001\002\000\006\002\223\014" +
    "\006\001\002\000\006\002\uffff\014\uffff\001\002\000\004" +
    "\056\007\001\002\000\004\006\010\001\002\000\014\010" +
    "\ufffa\047\013\050\012\051\022\052\014\001\002\000\014" +
    "\010\ufffd\047\013\050\012\051\022\052\014\001\002\000" +
    "\004\056\uffb3\001\002\000\004\056\uffb1\001\002\000\004" +
    "\056\212\001\002\000\004\010\211\001\002\000\004\056" +
    "\210\001\002\000\014\010\ufffc\047\013\050\012\051\022" +
    "\052\014\001\002\000\014\010\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\001\002\000\040\005\ufff8\006\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\026" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\056\ufff8\001\002" +
    "\000\004\056\uffb2\001\002\000\014\010\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\001\002\000\004\056\025\001\002" +
    "\000\004\030\026\001\002\000\012\031\027\047\013\050" +
    "\012\051\022\001\002\000\006\006\036\020\035\001\002" +
    "\000\006\027\033\031\034\001\002\000\004\056\032\001" +
    "\002\000\006\027\uffec\031\uffec\001\002\000\010\047\013" +
    "\050\012\051\022\001\002\000\006\006\036\020\035\001" +
    "\002\000\004\026\204\001\002\000\034\005\051\006\036" +
    "\011\052\012\055\015\053\016\043\017\042\020\035\026" +
    "\050\047\013\050\012\051\022\056\045\001\002\000\014" +
    "\010\uffed\047\uffed\050\uffed\051\uffed\052\uffed\001\002\000" +
    "\004\026\203\001\002\000\010\043\176\044\200\045\175" +
    "\001\002\000\022\023\061\026\172\030\071\041\070\053" +
    "\067\054\063\055\072\056\045\001\002\000\004\026\171" +
    "\001\002\000\030\005\uffe7\006\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\026\uffe7\056\uffe7" +
    "\001\002\000\102\004\uffd9\005\uffd9\006\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\154\031\uffd9\032\155\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\156\056\uffd9\001\002\000\034\005\051\006\036\011\052" +
    "\012\055\015\053\016\043\017\042\020\035\026\050\047" +
    "\013\050\012\051\022\056\045\001\002\000\030\005\051" +
    "\006\036\010\150\011\052\012\055\015\053\016\043\017" +
    "\042\020\035\026\050\056\045\001\002\000\030\005\uffda" +
    "\006\uffda\010\uffda\011\uffda\012\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\026\uffda\056\uffda\001\002\000\020\023\061" +
    "\030\071\041\070\053\067\054\063\055\072\056\045\001" +
    "\002\000\004\030\137\001\002\000\004\026\136\001\002" +
    "\000\004\056\127\001\002\000\004\056\057\001\002\000" +
    "\030\005\uffdb\006\uffdb\010\uffdb\011\uffdb\012\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\026\uffdb\056\uffdb\001\002\000" +
    "\004\043\060\001\002\000\020\023\061\030\071\041\070" +
    "\053\067\054\063\055\072\056\045\001\002\000\020\023" +
    "\061\030\071\041\070\053\067\054\063\055\072\056\045" +
    "\001\002\000\066\004\uffd2\005\uffd2\006\uffd2\011\uffd2\012" +
    "\uffd2\013\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\031" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\042\uffd2\056\uffd2\001\002\000\066\004\uffba\005\uffba\006" +
    "\uffba\011\uffba\012\uffba\013\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\031\uffba\033\uffba\034\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\042\uffba\056\uffba\001\002\000\066\004" +
    "\uffd3\005\uffd3\006\uffd3\011\uffd3\012\uffd3\013\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\031\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\037\uffd3\040\uffd3\042\uffd3\056\uffd3\001" +
    "\002\000\036\004\074\013\101\021\107\022\100\023\112" +
    "\024\110\025\111\027\121\034\114\035\077\036\115\037" +
    "\113\040\104\042\116\001\002\000\066\004\uffd1\005\uffd1" +
    "\006\uffd1\011\uffd1\012\uffd1\013\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\031\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\042\uffd1\056\uffd1\001\002\000\066" +
    "\004\uffbb\005\uffbb\006\uffbb\011\uffbb\012\uffbb\013\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\031\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\042\uffbb\056\uffbb" +
    "\001\002\000\020\023\061\030\071\041\070\053\067\054" +
    "\063\055\072\056\045\001\002\000\020\023\061\030\071" +
    "\041\070\053\067\054\063\055\072\056\045\001\002\000" +
    "\066\004\uffb9\005\uffb9\006\uffb9\011\uffb9\012\uffb9\013\uffb9" +
    "\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\031\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\042\uffb9\056" +
    "\uffb9\001\002\000\036\004\074\013\101\021\107\022\100" +
    "\023\112\024\110\025\111\031\102\034\114\035\077\036" +
    "\115\037\113\040\104\042\116\001\002\000\020\023\uffbd" +
    "\030\uffbd\041\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\001" +
    "\002\000\020\023\061\030\071\041\070\053\067\054\063" +
    "\055\072\056\045\001\002\000\020\023\uffca\030\uffca\041" +
    "\uffca\053\uffca\054\uffca\055\uffca\056\uffca\001\002\000\020" +
    "\023\uffc3\030\uffc3\041\uffc3\053\uffc3\054\uffc3\055\uffc3\056" +
    "\uffc3\001\002\000\020\023\uffc8\030\uffc8\041\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\001\002\000\020\023\uffbc\030" +
    "\uffbc\041\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\001\002" +
    "\000\066\004\uffcd\005\uffcd\006\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\031\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\042\uffcd" +
    "\056\uffcd\001\002\000\020\023\uffcb\030\uffcb\041\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\056\uffcb\001\002\000\020\023\uffc0" +
    "\030\uffc0\041\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\001" +
    "\002\000\020\023\uffcc\030\uffcc\041\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\001\002\000\020\023\uffc9\030\uffc9\041" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\001\002\000\020" +
    "\023\uffc6\030\uffc6\041\uffc6\053\uffc6\054\uffc6\055\uffc6\056" +
    "\uffc6\001\002\000\020\023\uffc5\030\uffc5\041\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\001\002\000\020\023\uffc4\030" +
    "\uffc4\041\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\001\002" +
    "\000\020\023\uffc7\030\uffc7\041\uffc7\053\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\001\002\000\020\023\uffc1\030\uffc1\041\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\056\uffc1\001\002\000\020\023" +
    "\uffbf\030\uffbf\041\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf" +
    "\001\002\000\020\023\uffc2\030\uffc2\041\uffc2\053\uffc2\054" +
    "\uffc2\055\uffc2\056\uffc2\001\002\000\020\023\uffbe\030\uffbe" +
    "\041\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\001\002\000" +
    "\066\004\074\005\uffd0\006\uffd0\011\uffd0\012\uffd0\013\101" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\107\022\100\023" +
    "\112\024\110\025\111\026\uffd0\027\uffd0\031\uffd0\033\uffd0" +
    "\034\114\035\077\036\115\037\113\040\104\042\116\056" +
    "\uffd0\001\002\000\066\004\uffce\005\uffce\006\uffce\011\uffce" +
    "\012\uffce\013\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\031\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\042\uffce\056\uffce\001\002\000\020\023\061\030\071" +
    "\041\070\053\067\054\063\055\072\056\045\001\002\000" +
    "\060\004\074\005\051\006\036\011\052\012\055\013\101" +
    "\015\053\016\043\017\042\020\035\021\107\022\100\023" +
    "\112\024\110\025\111\026\050\034\114\035\077\036\115" +
    "\037\113\040\104\042\116\056\045\001\002\000\030\005" +
    "\uffe1\006\uffe1\010\uffe1\011\uffe1\012\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\026\uffe1\056\uffe1\001\002\000\066\004" +
    "\uffcf\005\uffcf\006\uffcf\011\uffcf\012\uffcf\013\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\042\uffcf\056\uffcf\001" +
    "\002\000\006\026\ufff6\027\ufff6\001\002\000\006\026\134" +
    "\027\133\001\002\000\010\026\ufff4\027\ufff4\032\130\001" +
    "\002\000\004\054\131\001\002\000\004\033\132\001\002" +
    "\000\006\026\ufff3\027\ufff3\001\002\000\004\056\127\001" +
    "\002\000\040\005\ufff9\006\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\026\ufff9\047\ufff9\050" +
    "\ufff9\051\ufff9\052\ufff9\056\ufff9\001\002\000\006\026\ufff5" +
    "\027\ufff5\001\002\000\030\005\uffdd\006\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\026\uffdd" +
    "\056\uffdd\001\002\000\020\023\061\030\071\041\070\053" +
    "\067\054\063\055\072\056\045\001\002\000\036\004\074" +
    "\013\101\021\107\022\100\023\112\024\110\025\111\031" +
    "\141\034\114\035\077\036\115\037\113\040\104\042\116" +
    "\001\002\000\006\006\036\020\035\001\002\000\032\005" +
    "\uffe2\006\uffe2\007\143\010\uffe2\011\uffe2\012\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\026\uffe2\056\uffe2\001\002\000" +
    "\006\006\036\020\035\001\002\000\030\005\uffe3\006\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\026\uffe3\056\uffe3\001\002\000\060\004\074\005\051" +
    "\006\036\011\052\012\055\013\101\015\053\016\043\017" +
    "\042\020\035\021\107\022\100\023\112\024\110\025\111" +
    "\026\050\034\114\035\077\036\115\037\113\040\104\042" +
    "\116\056\045\001\002\000\030\005\uffe0\006\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\026" +
    "\uffe0\056\uffe0\001\002\000\030\005\uffe6\006\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\026" +
    "\uffe6\056\uffe6\001\002\000\042\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\015\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\026\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\056\uffe9" +
    "\001\002\000\030\005\051\006\036\010\153\011\052\012" +
    "\055\015\053\016\043\017\042\020\035\026\050\056\045" +
    "\001\002\000\040\005\ufff7\006\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\026\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\052\ufff7\056\ufff7\001\002\000\042\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\026\uffea\047\uffea\050\uffea\051" +
    "\uffea\052\uffea\056\uffea\001\002\000\022\023\061\030\071" +
    "\031\163\041\070\053\067\054\063\055\072\056\045\001" +
    "\002\000\020\023\061\030\071\041\070\053\067\054\063" +
    "\055\072\056\045\001\002\000\004\056\045\001\002\000" +
    "\074\004\uffd8\005\uffd8\006\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\031\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\056\uffd8\001\002\000\066\004\uffb6" +
    "\005\uffb6\006\uffb6\011\uffb6\012\uffb6\013\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\031\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\042\uffb6\056\uffb6\001\002" +
    "\000\036\004\074\013\101\021\107\022\100\023\112\024" +
    "\110\025\111\033\162\034\114\035\077\036\115\037\113" +
    "\040\104\042\116\001\002\000\074\004\uffd7\005\uffd7\006" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\015\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\031\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\056" +
    "\uffd7\001\002\000\066\004\uffb8\005\uffb8\006\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\031\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040" +
    "\uffb8\042\uffb8\056\uffb8\001\002\000\040\004\074\013\101" +
    "\021\107\022\100\023\112\024\110\025\111\027\uffb5\031" +
    "\uffb5\034\114\035\077\036\115\037\113\040\104\042\116" +
    "\001\002\000\006\027\166\031\167\001\002\000\020\023" +
    "\061\030\071\041\070\053\067\054\063\055\072\056\045" +
    "\001\002\000\066\004\uffb7\005\uffb7\006\uffb7\011\uffb7\012" +
    "\uffb7\013\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\031" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\042\uffb7\056\uffb7\001\002\000\040\004\074\013\101\021" +
    "\107\022\100\023\112\024\110\025\111\027\uffb4\031\uffb4" +
    "\034\114\035\077\036\115\037\113\040\104\042\116\001" +
    "\002\000\030\005\uffdc\006\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\026\uffdc\056\uffdc\001" +
    "\002\000\030\005\uffde\006\uffde\010\uffde\011\uffde\012\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\026\uffde\056\uffde\001" +
    "\002\000\036\004\074\013\101\021\107\022\100\023\112" +
    "\024\110\025\111\026\174\034\114\035\077\036\115\037" +
    "\113\040\104\042\116\001\002\000\030\005\uffdf\006\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\026\uffdf\056\uffdf\001\002\000\020\023\uffd4\030\uffd4" +
    "\041\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\001\002\000" +
    "\020\023\uffd6\030\uffd6\041\uffd6\053\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\001\002\000\020\023\061\030\071\041\070\053" +
    "\067\054\063\055\072\056\045\001\002\000\020\023\uffd5" +
    "\030\uffd5\041\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\001" +
    "\002\000\036\004\074\013\101\021\107\022\100\023\112" +
    "\024\110\025\111\026\202\034\114\035\077\036\115\037" +
    "\113\040\104\042\116\001\002\000\030\005\uffe5\006\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\026\uffe5\056\uffe5\001\002\000\030\005\uffe4\006\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\026\uffe4\056\uffe4\001\002\000\042\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\026\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\056\uffe8\001\002\000\004\056\206\001\002\000\006\027" +
    "\uffeb\031\uffeb\001\002\000\014\010\ufff0\047\ufff0\050\ufff0" +
    "\051\ufff0\052\ufff0\001\002\000\012\026\ufff4\027\ufff4\030" +
    "\026\032\130\001\002\000\006\002\ufffe\014\ufffe\001\002" +
    "\000\004\030\213\001\002\000\012\031\214\047\013\050" +
    "\012\051\022\001\002\000\006\006\036\020\035\001\002" +
    "\000\006\027\033\031\216\001\002\000\006\006\036\020" +
    "\035\001\002\000\014\010\uffee\047\uffee\050\uffee\051\uffee" +
    "\052\uffee\001\002\000\014\010\uffef\047\uffef\050\uffef\051" +
    "\uffef\052\uffef\001\002\000\014\010\ufffb\047\013\050\012" +
    "\051\022\052\014\001\002\000\006\002\000\014\000\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\006\002\003\017\004\001\001\000\004\017" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\014\004\020\006\016\010\010\015" +
    "\017\020\015\001\001\000\012\004\151\006\220\015\017" +
    "\020\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\125\016\124" +
    "\001\001\000\006\015\022\020\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\027\020" +
    "\030\001\001\000\004\011\206\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\204\001" +
    "\001\000\004\011\036\001\001\000\002\001\001\000\022" +
    "\004\020\010\045\011\055\012\046\014\037\020\053\021" +
    "\043\022\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\176\001\001\000\012\014\061\022\063\024" +
    "\172\032\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\151\011\055\012\150\014" +
    "\037\020\053\021\043\022\040\001\001\000\012\011\055" +
    "\014\037\021\146\022\040\001\001\000\002\001\001\000" +
    "\012\014\061\022\063\024\144\032\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\125\016\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\061\022\063\024\064\032\065\001\001\000" +
    "\012\014\061\022\063\024\123\032\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\025" +
    "\074\026\104\027\102\030\075\031\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\061\022\063\024" +
    "\117\032\065\001\001\000\012\014\061\022\063\024\072" +
    "\032\065\001\001\000\002\001\001\000\014\025\074\026" +
    "\104\027\102\030\075\031\105\001\001\000\002\001\001" +
    "\000\012\014\061\022\063\024\116\032\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\074\026\104\027\102\030\075\031" +
    "\105\001\001\000\014\025\074\026\104\027\102\030\075" +
    "\031\105\001\001\000\012\014\061\022\063\024\121\032" +
    "\065\001\001\000\024\011\055\014\037\021\122\022\040" +
    "\025\074\026\104\027\102\030\075\031\105\001\001\000" +
    "\002\001\001\000\014\025\074\026\104\027\102\030\075" +
    "\031\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\061\022\063" +
    "\024\137\032\065\001\001\000\014\025\074\026\104\027" +
    "\102\030\075\031\105\001\001\000\004\011\141\001\001" +
    "\000\002\001\001\000\004\011\143\001\001\000\002\001" +
    "\001\000\024\011\055\014\037\021\145\022\040\025\074" +
    "\026\104\027\102\030\075\031\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\055" +
    "\014\037\021\146\022\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\013\164\014\061\022\063\024\163" +
    "\032\065\001\001\000\012\014\061\022\063\024\160\032" +
    "\065\001\001\000\006\014\157\022\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\074\026\104\027" +
    "\102\030\075\031\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\074\026\104\027\102\030\075\031" +
    "\105\001\001\000\002\001\001\000\012\014\061\022\063" +
    "\024\167\032\065\001\001\000\002\001\001\000\014\025" +
    "\074\026\104\027\102\030\075\031\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\074\026\104\027" +
    "\102\030\075\031\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\061\022\063\024" +
    "\200\032\065\001\001\000\002\001\001\000\014\025\074" +
    "\026\104\027\102\030\075\031\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\214\020\030" +
    "\001\001\000\004\011\217\001\001\000\002\001\001\000" +
    "\004\011\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\022\020\023\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        public void syntax_error(Symbol cur_token){
            report_error("compiler has detected a syntax error at line " + cur_token.left + " column " + cur_token.right +" symbol "+ (String) cur_token.value,null);
            // report_error("Syntax error" + cur_token.left,null); 
        }
        public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
            report_fatal_error("Couldn't repair and continue parse: "+ (String) cur_token.value, null);
        }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // type_id ::= BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = Type.BOOLEAN ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_id",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // type_id ::= FLOAT 
            {
              Type RESULT =null;
		 RESULT = Type.FLOAT ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_id",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // type_id ::= INT 
            {
              Type RESULT =null;
		 RESULT = Type.INT ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_id",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // method_expr ::= method_expr COMMA expr 
            {
              LinkedList<Expression> RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expression> me = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 me.add(e); 
                                                                           RESULT = me; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // method_expr ::= expr 
            {
              LinkedList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Expression> l = new LinkedList<Expression>() ;
                                                                           l.add(e);
                                                                           RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // method_call ::= IDENT DOT method_call 
            {
              MethodCall RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall mc = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCall((String)i+"."+mc.getId(),mc.getlParam()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // method_call ::= IDENT LEFT_P method_expr RT_P 
            {
              MethodCall RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expression> me = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MethodCall((String)i,me); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // method_call ::= IDENT LEFT_P RT_P 
            {
              MethodCall RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new MethodCall((String)i,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // literal ::= floatLiteral 
            {
              Literal RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float fl = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatLiteral(fl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // literal ::= intLiteral 
            {
              Literal RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer in = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntLiteral(in); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // literal ::= boolLiteral 
            {
              Literal RESULT =null;
		int bolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bol = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolLiteral(bol); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cond_op ::= OR 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.OR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cond_op ::= AND 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.AND; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // eq_op ::= NOT_EQ 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.NOT_EQ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eq_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // eq_op ::= EQ 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.EQ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eq_op",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // rel_op ::= GTR_EQ 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.GTR_EQ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rel_op ::= LESS_EQ 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.LESS_EQ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rel_op ::= LESS 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.LESS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rel_op ::= GTR 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.GTR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arith_op ::= DIV 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.DIV; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arith_op ::= DIVIDE 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.DIVIDE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arith_op ::= MULT 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.MULT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arith_op ::= MINUS 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.MINUS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // arith_op ::= PLUS 
            {
              BinOpType RESULT =null;
		 RESULT = BinOpType.PLUS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bin_op ::= cond_op 
            {
              BinOpType RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinOpType co = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = co; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bin_op ::= eq_op 
            {
              BinOpType RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinOpType eo = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = eo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bin_op ::= rel_op 
            {
              BinOpType RESULT =null;
		int roleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int roright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinOpType ro = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ro; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bin_op ::= arith_op 
            {
              BinOpType RESULT =null;
		int aoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BinOpType ao = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ao; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= LEFT_P expr RT_P 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOpExpr(UnaryOpType.NOT,e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= MINUS expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryOpExpr(UnaryOpType.MINUS,e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr bin_op expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinOpType op = (BinOpType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpExpr(e1,op,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= method_call 
            {
              Expression RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCall mc = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MethodCallExpr(mc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= location 
            {
              Expression RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = loc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assing_op ::= AUTODEC 
            {
              AssignOpType RESULT =null;
		 RESULT = AssignOpType.AUTODEC; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assing_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assing_op ::= AUTOIN 
            {
              AssignOpType RESULT =null;
		 RESULT = AssignOpType.AUTOIN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assing_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assing_op ::= ASSMNT 
            {
              AssignOpType RESULT =null;
		 RESULT = AssignOpType.ASSMNT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assing_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // location ::= IDENT LEFT_B expr RT_B 
            {
              Location RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarLocation((String)i,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // location ::= IDENT DOT location 
            {
              Location RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarLocation((String)i,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // location ::= IDENT 
            {
              Location RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarLocation((String)i,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= SEMI 
            {
              Statement RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= body_method 
            {
              Statement RESULT =null;
		int bmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block bm = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = bm; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= CONTINUE SEMI 
            {
              Statement RESULT =null;
		 RESULT = new ContinueStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= BREAK SEMI 
            {
              Statement RESULT =null;
		 RESULT = new BreakStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= RET SEMI 
            {
              Statement RESULT =null;
		 RESULT = new ReturnStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= RET expr SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStmt(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= WHILE expr statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileStmt(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= FOR IDENT ASSMNT expr COMMA expr statement 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForStmt((String)id,e1,e2,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= IF LEFT_P expr RT_P body_method 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block bIf = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStmt(c,bIf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= IF LEFT_P expr RT_P body_method ELSE body_method 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block bIf = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bElseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bElseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block bElse = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStmt(c,bIf,bElse); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= method_call SEMI 
            {
              Statement RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodCall m = (MethodCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= location assing_op expr SEMI 
            {
              Statement RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssignOpType op = (AssignOpType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new AssignStmt(loc,op,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // state_list ::= state_list statement 
            {
              LinkedList<Statement> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Statement> st = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 st.add(s);
                                                                              RESULT = st; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // state_list ::= statement 
            {
              LinkedList<Statement> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Statement> ls = new LinkedList<Statement>();
                                                                              ls.add(st);
                                                                              RESULT = ls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // body_method ::= EXTERN SEMI 
            {
              Block RESULT =null;
		 RESULT = new Block (null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_method",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // body_method ::= BEGIN state_list END 
            {
              Block RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Statement> st = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block (null,st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_method",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // body_method ::= BEGIN fields_dec state_list END 
            {
              Block RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<FieldDeclaration> fd = (LinkedList<FieldDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Statement> st = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block (fd,st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body_method",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // param ::= param COMMA type_id IDENT 
            {
              LinkedList<Parameter> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Parameter> l = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(new Parameter(t,id)); 
                                                                               RESULT= l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // param ::= type_id IDENT 
            {
              LinkedList<Parameter> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Parameter> l = new LinkedList<Parameter>() ; 
                                                                               l.add(new Parameter(t,i)); 
                                                                               RESULT= l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // method_dec ::= type_id IDENT LEFT_P param RT_P body_method 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Parameter> p = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block bm = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Method(t,i,p,bm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_dec",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method_dec ::= VOID IDENT LEFT_P param RT_P body_method 
            {
              Method RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Parameter> p = (LinkedList<Parameter>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block bm = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Method(Type.VOID,i,p,bm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_dec",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // method_dec ::= VOID IDENT LEFT_P RT_P body_method 
            {
              Method RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block bm = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Method(Type.VOID,i,null,bm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_dec",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // method_dec ::= type_id IDENT LEFT_P RT_P body_method 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block bm = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Method(t,i,null,bm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_dec",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methods_dec ::= methods_dec method_dec 
            {
              LinkedList<Method> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Method> l = (LinkedList<Method>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(m);
                                                                       RESULT = l ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methods_dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // methods_dec ::= method_dec 
            {
              LinkedList<Method> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Method> l = new LinkedList<Method>() ;
                                                                       l.add(m);
                                                                       RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methods_dec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // idents_sel ::= IDENT LEFT_B intLiteral RT_B 
            {
              LocationDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LocationDeclaration(i,il); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idents_sel",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // idents_sel ::= IDENT 
            {
              LocationDeclaration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LocationDeclaration(i,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idents_sel",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_ident ::= list_ident COMMA idents_sel 
            {
              LinkedList<LocationDeclaration> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LocationDeclaration> l = (LinkedList<LocationDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LocationDeclaration ld = (LocationDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(ld);
                                                                    RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_ident",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_ident ::= idents_sel 
            {
              LinkedList<LocationDeclaration> RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LocationDeclaration ld = (LocationDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<LocationDeclaration> l = new LinkedList<LocationDeclaration>() ;
                                                                   l.add(ld);
                                                                   RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_ident",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fields_dec ::= fields_dec field_dec 
            {
              LinkedList<FieldDeclaration> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<FieldDeclaration> l = (LinkedList<FieldDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldDeclaration f = (FieldDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(f);
                                                                       RESULT = l ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fields_dec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fields_dec ::= field_dec 
            {
              LinkedList<FieldDeclaration> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FieldDeclaration f = (FieldDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<FieldDeclaration> l = new LinkedList<FieldDeclaration>();
                                                                       l.add(f);
                                                                       RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fields_dec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_dec ::= type_id list_ident SEMI 
            {
              FieldDeclaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<LocationDeclaration> lid = (LinkedList<LocationDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FieldDeclaration(t,lid); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_dec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // body ::= 
            {
              Declaration RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body ::= fields_dec methods_dec 
            {
              Declaration RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<FieldDeclaration> fd = (LinkedList<FieldDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Method> md = (LinkedList<Method>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaration(fd,md);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= methods_dec 
            {
              Declaration RESULT =null;
		int mdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Method> md = (LinkedList<Method>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaration(null,md); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body ::= fields_dec 
            {
              Declaration RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<FieldDeclaration> fd = (LinkedList<FieldDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaration(fd,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_dec ::= CLASS IDENT BEGIN body END 
            {
              ClassDec RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaration b = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClassDec(i,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_dec",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= class_dec 
            {
              Program RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDec cd = (ClassDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ClassDec> l = new LinkedList<ClassDec>() ;
                                                                                  l.add(cd);
                                                                                  RESULT = new Program(l) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program class_dec 
            {
              Program RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program lp = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDec cd = (ClassDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ClassDec> l = new LinkedList<ClassDec>();
                                                                                  l.add(cd);
                                                                                  RESULT = new Program(l) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

